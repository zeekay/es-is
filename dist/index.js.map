{"version":3,"file":"index.js","sources":["../src/index.coffee"],"sourcesContent":["###*!\n# is\n# the definitive JavaScript type testing library\n#\n# @copyright 2013-2014 Enrico Marino / Jordan Harband\n# @license MIT\n###\n\nobjProto = Object.prototype\nowns = objProto.hasOwnProperty\ntoStr = objProto.toString\nsymbolValueOf = undefined\nif typeof Symbol == 'function'\n  symbolValueOf = Symbol::valueOf\n\nisActualNaN = (value) ->\n  value != value\n\nNON_HOST_TYPES =\n  boolean:   1\n  number:    1\n  string:    1\n  undefined: 1\n\nbase64Regex = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/\nhexRegex    = /^[A-Fa-f0-9]+$/\n\nexport isType = (value, type) ->\n  typeof value == type\n\n###*\n# Test if `value` is defined.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if 'value' is defined, false otherwise\n# @api public\n###\n\nexport isDefined = (value) ->\n  typeof value != 'undefined'\n\n###*\n# Test if `value` is empty.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is empty, false otherwise\n# @api public\n###\n\nexport isEmpty = (value) ->\n  type = toStr.call(value)\n  key = undefined\n  if type == '[object Array]' or type == '[object Arguments]' or type == '[object String]'\n    return value.length == 0\n  if type == '[object Object]'\n    for key of value\n      `key = key`\n      if owns.call(value, key)\n        return false\n    return true\n  !value\n\n###*\n# export isequal\n# Test if `value` is equal to `other`.\n#\n# @param {Mixed} value value to test\n# @param {Mixed} other value to compare with\n# @return {Boolean} true if `value` is equal to `other`, false otherwise\n###\n\nexport isEqual = (value, other) ->\n  if value == other\n    return true\n  type = toStr.call(value)\n  key = undefined\n  if type != toStr.call(other)\n    return false\n  if type == '[object Object]'\n    for key of value\n      `key = key`\n      if !isEqual(value[key], other[key]) or !(key of other)\n        return false\n    for key of other\n      `key = key`\n      if !isEqual(value[key], other[key]) or !(key of value)\n        return false\n    return true\n  if type == '[object Array]'\n    key = value.length\n    if key != other.length\n      return false\n    while key--\n      if !isEqual(value[key], other[key])\n        return false\n    return true\n  if type == '[object Function]'\n    return value.prototype == other.prototype\n  if type == '[object Date]'\n    return value.getTime() == other.getTime()\n  false\n\n###*\n# export ishosted\n# Test if `value` is hosted by `host`.\n#\n# @param {Mixed} value to test\n# @param {Mixed} host host to test with\n# @return {Boolean} true if `value` is hosted by `host`, false otherwise\n# @api public\n###\n\nexport isHosted = (value, host) ->\n  type = typeof host[value]\n  if type == 'object' then ! !host[value] else !NON_HOST_TYPES[type]\n\n###*\n# export isinstance\n# Test if `value` is an instance of `constructor`.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an instance of `constructor`\n# @api public\n###\n\nexport isInstanceof = (value, constructor) ->\n  value instanceof constructor\n\n###*\n# export isnil / export isnull\n# Test if `value` is null.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is null, false otherwise\n# @api public\n###\n\nexport isNil = (value) ->\n  value == null\n\n###*\n# export isundef / export isundefined\n# Test if `value` is undefined.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is undefined, false otherwise\n# @api public\n###\n\nexport isUndefined = (value) ->\n  typeof value == 'undefined'\n\n###*\n# Test arguments.\n###\n\n###*\n# export isargs\n# Test if `value` is an arguments object.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an arguments object, false otherwise\n# @api public\n###\n\nexport isArgs = (value) ->\n  isStandardArguments = toStr.call(value) == '[object Arguments]'\n  isOldArguments = !isArray(value) and isArrayLike(value) and isObject(value) and isFn(value.callee)\n  isStandardArguments or isOldArguments\n\n###*\n# Test array.\n###\n\n###*\n# export isarray\n# Test if 'value' is an array.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an array, false otherwise\n# @api public\n###\n\nexport isArray = Array.isArray or (value) ->\n  toStr.call(value) == '[object Array]'\n\n###*\n# export isarguments.empty\n# Test if `value` is an empty arguments object.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an empty arguments object, false otherwise\n# @api public\n###\n\nexport isEmptyArgs = (value) ->\n  isArgs(value) and value.length == 0\n\n###*\n# export isarray.empty\n# Test if `value` is an empty array.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an empty array, false otherwise\n# @api public\n###\n\nexport isEmptyArray = (value) ->\n  isArray(value) and value.length == 0\n\n###*\n# export isarraylike\n# Test if `value` is an arraylike object.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an arguments object, false otherwise\n# @api public\n###\n\nexport isArraylike = (value) ->\n  ! !value and !isBool(value) and owns.call(value, 'length') and isFinite(value.length) and isNumber(value.length) and value.length >= 0\n\n###*\n# Test boolean.\n###\n\n###*\n# export isbool\n# Test if `value` is a boolean.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a boolean, false otherwise\n# @api public\n###\n\nexport isBool = (value) ->\n  toStr.call(value) == '[object Boolean]'\n\n###*\n# export isfalse\n# Test if `value` is false.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is false, false otherwise\n# @api public\n###\n\nexport isFalse = (value) ->\n  isBool(value) and Boolean(Number(value)) == false\n\n###*\n# export istrue\n# Test if `value` is true.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is true, false otherwise\n# @api public\n###\n\nexport isTrue = (value) ->\n  isBool(value) and Boolean(Number(value)) == true\n\n###*\n# Test date.\n###\n\n###*\n# export isdate\n# Test if `value` is a date.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a date, false otherwise\n# @api public\n###\n\nexport isDate = (value) ->\n  toStr.call(value) == '[object Date]'\n\n###*\n# export isdate.valid\n# Test if `value` is a valid date.\n#\n# @param {Mixed} value value to test\n# @returns {Boolean} true if `value` is a valid date, false otherwise\n###\n\nexport isValidDate = (value) ->\n  isDate(value) and !isNaN(Number(value))\n\n###*\n# Test element.\n###\n\n###*\n# export iselement\n# Test if `value` is an html element.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an HTML Element, false otherwise\n# @api public\n###\n\nexport isElement = (value) ->\n  value != undefined and typeof HTMLElement != 'undefined' and value instanceof HTMLElement and value.nodeType == 1\n\n###*\n# Test error.\n###\n\n###*\n# export iserror\n# Test if `value` is an error object.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an error object, false otherwise\n# @api public\n###\n\nexport isError = (value) ->\n  toStr.call(value) == '[object Error]'\n\n###*\n# Test function.\n###\n\n###*\n# export isfn / export isfunction (deprecated)\n# Test if `value` is a function.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a function, false otherwise\n# @api public\n###\n\nexport isFunction = (value) ->\n  isAlert = typeof window != 'undefined' and value == window.alert\n  if isAlert\n    return true\n  str = toStr.call(value)\n  str == '[object Function]' or str == '[object GeneratorFunction]' or str == '[object AsyncFunction]'\n\n###*\n# Test number.\n###\n\n###*\n# export isnumber\n# Test if `value` is a number.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a number, false otherwise\n# @api public\n###\n\nexport isNumber = (value) ->\n  toStr.call(value) == '[object Number]'\n\n###*\n# export isinfinite\n# Test if `value` is positive or negative infinity.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is positive or negative Infinity, false otherwise\n# @api public\n###\n\nexport isInfinite = (value) ->\n  value == Infinity or value == -Infinity\n\n###*\n# export isdecimal\n# Test if `value` is a decimal number.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a decimal number, false otherwise\n# @api public\n###\n\nexport isDecimal = (value) ->\n  isNumber(value) and !isActualNaN(value) and !isInfinite(value) and value % 1 != 0\n\n###*\n# export isdivisibleBy\n# Test if `value` is divisible by `n`.\n#\n# @param {Number} value value to test\n# @param {Number} n dividend\n# @return {Boolean} true if `value` is divisible by `n`, false otherwise\n# @api public\n###\n\nexport isDivisibleBy = (value, n) ->\n  isDividendInfinite = isInfinite(value)\n  isDivisorInfinite = isInfinite(n)\n  isNonZeroNumber = isNumber(value) and !isActualNaN(value) and isNumber(n) and !isActualNaN(n) and n != 0\n  isDividendInfinite or isDivisorInfinite or isNonZeroNumber and value % n == 0\n\n###*\n# export isinteger\n# Test if `value` is an integer.\n#\n# @param value to test\n# @return {Boolean} true if `value` is an integer, false otherwise\n# @api public\n###\n\nexport isInteger = (value) ->\n  isNumber(value) and !isActualNaN(value) and value % 1 == 0\n\n###*\n# export ismaximum\n# Test if `value` is greater than 'others' values.\n#\n# @param {Number} value value to test\n# @param {Array} others values to compare with\n# @return {Boolean} true if `value` is greater than `others` values\n# @api public\n###\n\nexport isMaximum = (value, others) ->\n  if isActualNaN(value)\n    throw new TypeError('NaN is not a valid value')\n  else if !isArrayLike(others)\n    throw new TypeError('second argument must be array-like')\n  len = others.length\n  while --len >= 0\n    if value < others[len]\n      return false\n  true\n\n###*\n# export isminimum\n# Test if `value` is less than `others` values.\n#\n# @param {Number} value value to test\n# @param {Array} others values to compare with\n# @return {Boolean} true if `value` is less than `others` values\n# @api public\n###\n\nexport isMinimum = (value, others) ->\n  if isActualNaN(value)\n    throw new TypeError('NaN is not a valid value')\n  else if !isArrayLike(others)\n    throw new TypeError('second argument must be array-like')\n  len = others.length\n  while --len >= 0\n    if value > others[len]\n      return false\n  true\n\n###*\n# export isnan\n# Test if `value` is not a number.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is not a number, false otherwise\n# @api public\n###\n\nexport isNan = (value) ->\n  isNumber(value) or value != value\n\n###*\n# export iseven\n# Test if `value` is an even number.\n#\n# @param {Number} value value to test\n# @return {Boolean} true if `value` is an even number, false otherwise\n# @api public\n###\n\nexport even = (value) ->\n  isInfinite(value) or isNumber(value) and value == value and value % 2 == 0\n\n###*\n# export isodd\n# Test if `value` is an odd number.\n#\n# @param {Number} value value to test\n# @return {Boolean} true if `value` is an odd number, false otherwise\n# @api public\n###\n\nexport odd = (value) ->\n  isInfinite(value) or isNumber(value) and value == value and value % 2 != 0\n\n###*\n# export isge\n# Test if `value` is greater than or equal to `other`.\n#\n# @param {Number} value value to test\n# @param {Number} other value to compare with\n# @return {Boolean}\n# @api public\n###\n\nexport isge = (value, other) ->\n  if isActualNaN(value) or isActualNaN(other)\n    throw new TypeError('NaN is not a valid value')\n  !sInfinite(value) and !isInfinite(other) and value >= other\n\n###*\n# export isgt\n# Test if `value` is greater than `other`.\n#\n# @param {Number} value value to test\n# @param {Number} other value to compare with\n# @return {Boolean}\n# @api public\n###\n\nexport gt = (value, other) ->\n  if isActualNaN(value) or isActualNaN(other)\n    throw new TypeError('NaN is not a valid value')\n  !isInfinite(value) and !isInfinite(other) and value > other\n\n###*\n# export isle\n# Test if `value` is less than or equal to `other`.\n#\n# @param {Number} value value to test\n# @param {Number} other value to compare with\n# @return {Boolean} if 'value' is less than or equal to 'other'\n# @api public\n###\n\nexport le = (value, other) ->\n  if isActualNaN(value) or isActualNaN(other)\n    throw new TypeError('NaN is not a valid value')\n  !isInfinite(value) and !isInfinite(other) and value <= other\n\n###*\n# export islt\n# Test if `value` is less than `other`.\n#\n# @param {Number} value value to test\n# @param {Number} other value to compare with\n# @return {Boolean} if `value` is less than `other`\n# @api public\n###\n\nexport lt = (value, other) ->\n  if isActualNaN(value) or isActualNaN(other)\n    throw new TypeError('NaN is not a valid value')\n  !isInfinite(value) and !isInfinite(other) and value < other\n\n###*\n# export iswithin\n# Test if `value` is within `start` and `finish`.\n#\n# @param {Number} value value to test\n# @param {Number} start lower bound\n# @param {Number} finish upper bound\n# @return {Boolean} true if 'value' is is within 'start' and 'finish'\n# @api public\n###\n\nexport within = (value, start, finish) ->\n  if isActualNaN(value) or isActualNaN(start) or isActualNaN(finish)\n    throw new TypeError('NaN is not a valid value')\n  else if !isNumber(value) or !isNumber(start) or !isNumber(finish)\n    throw new TypeError('all arguments must be numbers')\n  isAnyInfinite = isInfinite(value) or isInfinite(start) or isInfinite(finish)\n  isAnyInfinite or value >= start and value <= finish\n\n###*\n# Test object.\n###\n\n###*\n# export isobject\n# Test if `value` is an object.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an object, false otherwise\n# @api public\n###\n\nexport isObject = (value) ->\n  toStr.call(value) == '[object Object]'\n\n###*\n# export isprimitive\n# Test if `value` is a primitive.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a primitive, false otherwise\n# @api public\n###\n\nexport isPrimitive = (value) ->\n  if !value\n    return true\n  if typeof value == 'object' or isObject(value) or isFn(value) or isArray(value)\n    return false\n  true\n\n###*\n# export ishash\n# Test if `value` is a hash - a plain object literal.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a hash, false otherwise\n# @api public\n###\n\nexport isHash = (value) ->\n  isObject(value) and value.constructor == Object and !value.nodeType and !value.setInterval\n\n###*\n# Test regexp.\n###\n\n###*\n# export isregexp\n# Test if `value` is a regular expression.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a regexp, false otherwise\n# @api public\n###\n\nexport isRegexp = (value) ->\n  toStr.call(value) == '[object RegExp]'\n\n###*\n# Test string.\n###\n\n###*\n# export isstring\n# Test if `value` is a string.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if 'value' is a string, false otherwise\n# @api public\n###\n\nexport isString = (value) ->\n  toStr.call(value) == '[object String]'\n\n###*\n# Test base64 string.\n###\n\n###*\n# export isbase64\n# Test if `value` is a valid base64 encoded string.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if 'value' is a base64 encoded string, false otherwise\n# @api public\n###\n\nexport isBase64 = (value) ->\n  isString(value) and (!value.length or base64Regex.test(value))\n\n###*\n# Test base64 string.\n###\n\n###*\n# export ishex\n# Test if `value` is a valid hex encoded string.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if 'value' is a hex encoded string, false otherwise\n# @api public\n###\n\nexport isHex = (value) ->\n  isString(value) and (!value.length or hexRegex.test(value))\n\n###*\n# export issymbol\n# Test if `value` is an ES6 Symbol\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a Symbol, false otherise\n# @api public\n###\n\nexport isSymbol = (value) ->\n  typeof Symbol == 'function' and toStr.call(value) == '[object Symbol]' and typeof symbolValueOf.call(value) == 'symbol'\n"],"names":[],"mappings":"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"}